package edu.uclm.esi.videochat;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.WebElement;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import edu.uclm.esi.videochat.model.User;
import edu.uclm.esi.videochat.springdao.UserRepository;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import java.util.*;
import java.util.concurrent.TimeUnit;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest
public class TestSelenium {
	private WebDriver chromeDriver;
	private WebDriver firefoxDriver;
	private WebDriver edgeDriver;
	JavascriptExecutor js;

	@Autowired
	UserRepository usersRepo;

	@Before
	/* Comun a todos */
	public void setUp() {
		/* Indicamos el path de los drivers */
		System.setProperty("webdriver.chrome.driver", "C:/Users/raulvj/Downloads/chromedriver.exe");
		System.setProperty("webdriver.gecko.driver", "C:/Users/raulvj/Downloads/geckodriver.exe");
		System.setProperty("webdriver.edge.driver", "C:/Users/raulvj/Downloads/msedgedriver.exe");
		
		/* Creamos una fake-cam en Chrome */
		ChromeOptions options = new ChromeOptions();
		options.addArguments("--use-fake-ui-for-media-stream");
		options.addArguments("--use-fake-device-for-media-stream");
		chromeDriver = new ChromeDriver(options);
	
		/* Creamos una fake-cam en Firefox */
		FirefoxOptions firefoxOptions = new FirefoxOptions();
		firefoxOptions.addPreference("media.navigator.streams.fake", true);
		firefoxDriver = new FirefoxDriver(firefoxOptions);

		edgeDriver = new EdgeDriver();

		chromeDriver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);

		js = (JavascriptExecutor) chromeDriver;
		new HashMap<String, Object>();
	}

	@After
	/* Comun a cada caso de prueba */
	public void tearDown() {
		chromeDriver.quit();
		firefoxDriver.quit();
		edgeDriver.quit();
	}

	@Test
	public void selenium() {
		/* Buscamos los usuarios en la BD */
		Optional<User> optUser1 = usersRepo.findByName("pepe"); 
		Optional<User> optUser2 = usersRepo.findByName("ana"); 
		Optional<User> optUser3 = usersRepo.findByName("lucas");
		
		/* Borramos los usuarios si es que existen en la BD */
		if (optUser1.isPresent()) { usersRepo.deleteById(optUser1.get().getId()); }
		if (optUser2.isPresent()) { usersRepo.deleteById(optUser2.get().getId()); }
		if (optUser3.isPresent()) { usersRepo.deleteById(optUser3.get().getId()); }

		/* Caso de prueba: se registran 3 usuarios: Pepe, Ana y Lucas */
		register(edgeDriver, "pepe", "pepe@gmail.com", "pepe123"); 
		register(chromeDriver, "ana", "ana@gmail.com", "ana123");
		register(firefoxDriver, "lucas", "lucas@gmail.com", "lucas123");
		
		try { Thread.sleep(2000); } catch (InterruptedException e ) { }

		/* Caso de prueba: hacer login con Pepe, Ana y Lucas */
		login(edgeDriver, "pepe", "pepe123");
		login(chromeDriver, "ana", "ana123");
		login(firefoxDriver, "lucas", "lucas123");
		
		/* Caso de prueba: Pepe solicita videollamada con Ana, que la rechaza */
		rechazarLlamada(edgeDriver, chromeDriver);

		try { Thread.sleep(3000); } catch (InterruptedException e ) { }
		
		/* Caso de prueba: Ana solicita videollamda con Lucas, que la acepta */
		aceptarLlamada(chromeDriver, firefoxDriver);
	}

	
	/** -----------------------NOTA---------------------------
	 * Debido al cambio visual de ultima hora para ejecutar este testing 
	 * debemos modificar las rutas de navData en appController a las que 
	 * queremos que se conecte. Es decir, para realizar este testing 
	 * tendremos que cambiar los path de login y register de
	 * login2 a login y de register2 a register **/
	
	
	private void register(WebDriver driver, String nombre, String email, String pwd) {
		
		driver.get("https://localhost:7500/");
		
		try { Thread.sleep(2000); } catch (InterruptedException e ) { }
		
		/* Para aceptar el Cerficado de conexión no segura y acceder a localhost */
		if (driver instanceof ChromeDriver) {
			driver.findElement(By.id("details-button")).click();
			driver.findElement(By.id("proceed-link")).click();
		} else if (driver instanceof EdgeDriver) {
			driver.findElement(By.id("details-button")).click();
			driver.findElement(By.id("proceed-link")).click();
		}

		try { Thread.sleep(500); } catch (InterruptedException e) { }
		
		//driver.findElement(By.linkText("Crear cuenta")).click();
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/a[1]")).click();
		
		try { Thread.sleep(500); } catch (InterruptedException e) { }
		
		/* Rellenamos el formulario para registrarnos */
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[1]")).click();
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[1]")).sendKeys(nombre);
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[2]")).click();
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[2]")).sendKeys(email);
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[3]")).click();
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[3]")).sendKeys(pwd);
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[4]")).click();
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[4]")).sendKeys(pwd);
		driver.findElement(By.id("btnCrearCuenta")).click();
		
		try { Thread.sleep(500); } catch (InterruptedException e) { }
		
		/* Comprobamos que el registro se ha realizado correctamente */
		assertThat(driver.switchTo().alert().getText(), is("Registrado correctamente"));
		
		try { Thread.sleep(1000); } catch (InterruptedException e) { }
		
		driver.switchTo().alert().accept();
	}

	private void login(WebDriver driver, String nombre, String pwd) {
		driver.get("https://localhost:7500/");
		
		try { Thread.sleep(2500); } catch (InterruptedException e) { }
		
		/* Introducimos las credenciales de acceso */
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[1]")).click();
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[1]")).sendKeys(nombre);
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[2]")).click();
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/input[2]")).sendKeys(pwd);
		
		driver.findElement(By.xpath("/html/body/div/oj-module/div[1]/form/button")).click();

		try { Thread.sleep(500); } catch (InterruptedException e) { }
		
		/* Comprobamos que el login se ha realizado correctamente */
		assertThat(driver.findElement(By.cssSelector(".oj-hybrid-applayout-header-title")).getText(), is("Chat"));

	}

	private void rechazarLlamada(WebDriver edgeDriver, WebDriver chromeDriver) {
		WebElement elemento = null;
		int i;
		/* Buscamos en la lista de usuarios el elemento deseado */
		for (i = 1; i <= 3; i++) {
			elemento = edgeDriver.findElement(By.xpath("/html/body/div/oj-module/div[1]/div[2]/div/div/div[3]/div[1]/div[" + i + "]"));
			if (elemento.getText().contains("ana")) {
				break;
			}
		}
		
		/* Habilitamos las llamadas en este navegador */
		//chromeDriver.findElement(By.xpath("/html/body/div/oj-module/div[1]/div[2]/div/div/div[2]/button")).click();
		
		/* Hacemos clic en el botón Hacer llamada correspondiente al usuario */
		WebElement boton = elemento.findElement(By.xpath("/html/body/div/oj-module/div[1]/div[2]/div/div/div[3]/div[1]/div[" + i + "]/button"));
		boton.click();
		
		try { Thread.sleep(5000); } catch (InterruptedException e) { }
		
		/* Ana rechaza la llamada */
		Alert confirmationAlert = chromeDriver.switchTo().alert();
		String alertText = confirmationAlert.getText();
		System.out.println("Alert text is: " + alertText);
		confirmationAlert.dismiss();

		try { Thread.sleep(500); } catch (InterruptedException e) { }
		
		/* Confirmamos que la llamada ha sido rechazada */
		edgeDriver.switchTo().alert().accept();
		String texto = edgeDriver.findElement(By.xpath("/html/body/div/oj-module/div[1]/div[2]/div/div/div[3]/div[2]")).getText();
		assertThat(texto.contains("La llamada fue rechazada"), is(true));

	}
	
	private void aceptarLlamada(WebDriver chromeDriver, WebDriver firefoDriver) {
		WebElement elemento = null;
		int i;
		/* Buscamos en la lista de usuarios el elemento deseado */
		for (i = 1; i <= 3; i++) {
			elemento = chromeDriver.findElement(By.xpath("/html/body/div/oj-module/div[1]/div[2]/div/div/div[3]/div[1]/div[" + i + "]"));
			if (elemento.getText().contains("lucas")) {
				break;
			}
		}
		
		/* Hacemos clic en el botón Hacer llamada correspondiente al usuario */
		WebElement boton = elemento.findElement(By.xpath("/html/body/div/oj-module/div[1]/div[2]/div/div/div[3]/div[1]/div[" + i + "]/button"));
		boton.click();
		
		try { Thread.sleep(1000); } catch (InterruptedException e) { }
		
		/* Lucas acepta la llamada */
		Alert confirmationAlert = firefoDriver.switchTo().alert();
		String alertText = confirmationAlert.getText();
		System.out.println("Alert text is: " + alertText);
		confirmationAlert.accept();

		try { Thread.sleep(500); } catch (InterruptedException e) { }
		
		/* Confirmamos que la llamada ha sido aceptada */
		String texto = chromeDriver.findElement(By.xpath("/html/body/div/oj-module/div[1]/div[2]/div/div/div[3]/div[2]")).getText();
		assertThat(texto.contains("La llamada fue aceptada"), is(true));

	}

}
